{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-tag-query-tsx","path":"/tags/《-java-script-设计模式与开发实践》","result":{"data":{"allPost":{"nodes":[{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-适配器模式","title":"读《JavaScript 设计模式与开发实践》- 适配器模式","date":"15.07.2019","excerpt":"适配器模式别名叫包装器，作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作 通过适配器适配接口 假设我们正在编写一个渲染地图的页面。目前从第三方资源里获得了城市以及它们所对应的 ID…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-状态模式","title":"读《JavaScript 设计模式与开发实践》- 状态模式","date":"14.07.2019","excerpt":"…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-装饰器模式","title":"读《JavaScript 设计模式与开发实践》- 装饰器模式","date":"13.07.2019","excerpt":"…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-中介者模式","title":"读《JavaScript 设计模式与开发实践》- 中介者模式","date":"12.07.2019","excerpt":"…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-职责链模式","title":"读《JavaScript 设计模式与开发实践》- 职责链模式","date":"11.07.2019","excerpt":"使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止 职责链模式的最大优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系 无论是作用域链、原型链，还是DOM…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-享元模式","title":"读《JavaScript 设计模式与开发实践》- 享元模式","date":"10.07.2019","excerpt":"享元（flyweight）模式是一种用于性能优化的模式，“fly…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-模版方法模式","title":"读《JavaScript 设计模式与开发实践》- 模版方法模式","date":"09.07.2019","excerpt":"模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。 Coffee or Tea…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-组合模式","title":"读《JavaScript 设计模式与开发实践》- 组合模式","date":"08.07.2019","excerpt":"…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-命令模式","title":"读《JavaScript 设计模式与开发实践》- 命令模式","date":"07.07.2019","excerpt":"命令模式是最简单和优雅的模式之一，命令模式中的命令（command…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-发布订阅模式","title":"读《JavaScript 设计模式与开发实践》- 发布订阅模式","date":"06.07.2019","excerpt":"发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在JavaScript…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-迭代器模式","title":"读《JavaScript 设计模式与开发实践》- 迭代器模式","date":"05.07.2019","excerpt":"迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。 迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。 内部迭代器 forEach, map, reduce…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-代理模式","title":"读《JavaScript 设计模式与开发实践》- 代理模式","date":"04.07.2019","excerpt":"代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问 保护代理与虚拟代理 保护代理：代理帮主体过滤掉一些请求 虚拟代理：把一些开销很大的对象，延迟到真正需要它的时候才去创建 虚拟代理实现图片预加载 图片加载完成前的 loading…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-策略模式","title":"读《JavaScript 设计模式与开发实践》- 策略模式","date":"03.07.2019","excerpt":"…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-单例模式","title":"读《JavaScript 设计模式与开发实践》- 单例模式","date":"02.07.2019","excerpt":"保证一个类仅有一个实例，并提供一个访问它的全局访问点 有一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的window对象等 只能通过 Singleton.getInstance 来获取，不能通过 new…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]},{"__typename":"MdxPost","slug":"/读《-java-script-设计模式与开发实践》-设计原则","title":"读《JavaScript 设计模式与开发实践》- 设计原则","date":"01.07.2019","excerpt":"设计准则 《UNIX/LINUX 设计哲学》 小即是美 每一个程序只做好一件事 快速建立原型 舍弃高效率而取可移植性 采用纯文本来存储数据（可读性，不用二进制存） 充分利用软件的杠杆效应（软件复用） 使用 shell…","timeToRead":1,"description":"《JavaScript 设计模式与开发实践》读书笔记","tags":[{"name":"Note","slug":"note"},{"name":"《JavaScript 设计模式与开发实践》","slug":"《-java-script-设计模式与开发实践》"}]}]}},"pageContext":{"slug":"《-java-script-设计模式与开发实践》","name":"《JavaScript 设计模式与开发实践》","formatString":"DD.MM.YYYY"}}}